install.packages("devtools")
library(devtools)
library("devtools")
find_rtools()
find.package("devtools")
library(devtools)
find_rtools()
devtools::find_rtools()
install.packages("pkgbuilding")
search()
swirl()
library(swirl)
library(devtools)
search()
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
setwd("C:/Users/Emre/Desktop/Personel/Data Scientist Track/Course 6 - Statistical Inference/Week 4/Swirl")
library(swirl)
swirl()
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues, method = "bonferroni"))
sum(p.adjust(pValues, method = "bonferroni") < .05)
sum(p.adjust(pValues, method = "BH") < .05)
tail(trueStatus)
table(pValues2 < .05, trueStatus)
24/1000
24/500
table(p.adjust(pValues2, method = "bonferroni") < .05, trueStatus)
table(p.adjust(pValues2, method = "BH") < .05, trueStatus)
1 * 1/6 + 2 * 1/6 + 3 * 1/6 + 4 * 1/6 + 5 * 1/6 + 6 * 1/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh * B, replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCoutns
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count-Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
setwd("C:/Users/Emre/Desktop/Personel/Data Scientist Track/Course 6 - Statistical Inference/Week 4/Course Project")
rm(list = ls())
lambda <- 0.2
n <- 40
sim_count <- 1000
set.seed(1993)
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
hist(means)
hist(means)
par(mfrow = c(1,1))
hist(means)
hist(means, xlim = c(2, 10))
hist(means, xlim = c(2, 9))
hist(means, xlim = c(2, 8))
max(means)
min(means)
round(min(means))
floor(min(means))
ceiling(max(means))
hist(means, xlim = c(floor(min(means)), ceiling(max(means))))
head(simulation)
lambda <- 0.2
n <- 40
sim_count <- 1000
set.seed(1)
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
hist(means, xlim = c(floor(min(means)), ceiling(max(means))))
lambda <- 0.2
n <- 40
sim_count <- 1000
set.seed(2)
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
hist(means, xlim = c(floor(min(means)), ceiling(max(means))))
lambda <- 0.2
n <- 40
sim_count <- 1000
set.seed(3081993)
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
hist(means, xlim = c(floor(min(means)), ceiling(max(means))))
lambda <- 0.2
n <- 40
sim_count <- 1000
set.seed(25101993)
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
hist(means, xlim = c(floor(min(means)), ceiling(max(means))))
library(ggplot2)
ggplot(data = means) +
geom_histogram()
library(ggplot2)
ggplot() +
geom_histogram(aes(means))
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan")
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", bins = 30)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 1)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25) +
xlim(floor(min(means)), ceiling(max(means)))
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.10) +
xlim(floor(min(means)), ceiling(max(means)))
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.10)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.20)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25)
range(means)
ggplot() + geom_point(aes(means))
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25)
set.seed(88423)
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
range(means)
library(ggplot2)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25)
#Set simulation variables as described in the assignment
lambda <- 0.2
n <- 40
sim_count <- 1000
#Set seed for reproducibility
set.seed(88423)
#Conduct exponential simulation 'sim_count' times with 'n' exponentials and rate parameter equals 'lambda'
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
#Take a quick look of means
range(means)
library(ggplot2)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25) +
labs(x = "Simulation means", y = "Frequency", title = "Histogram of Exponential Simulation Means")
#Set simulation variables as described in the assignment
lambda <- 0.2
n <- 40
sim_count <- 1000
#Set seed for reproducibility
set.seed(88423)
#Conduct exponential simulation 'sim_count' times with 'n' exponentials and rate parameter equals 'lambda'
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
#Take a quick look of means
range(means)
library(ggplot2)
ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25) +
labs(x = "Simulation means", y = "Frequency", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
plot_means <- ggplot() +
geom_histogram(aes(means), color = "black", fill = "cyan", binwidth = 0.25) +
labs(x = "Simulation means", y = "Frequency", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
plot_means
theory_mean <- 1 / lambda
sample_mean <- mean(means)
plot_means +
geom_vline(xintercept = theory_mean, lwd = 2, color = "red")
plot_means +
geom_vline(xintercept = theory_mean, lwd = 2, color = "red") +
geom_vline(xintercept = sample_mean, lwd = 2, lty = 2, color = "black")
# Compare them and plot
abs(theory_mean - sample_mean)
plot_means +
geom_vline(aes(xintercept = theory_mean, lwd = 2, color = "red")) +
geom_vline(aes(xintercept = sample_mean, lwd = 2, lty = 2, color = "black"))
plot_means +
geom_vline(aes(xintercept = theory_mean, color = "red"), lwd = 2) +
geom_vline(aes(xintercept = sample_mean, color = "black"), lwd = 2, lty = 2)
plot_means +
geom_vline(aes(xintercept = theory_mean, color = "theory"), lwd = 2, color = "red") +
geom_vline(aes(xintercept = sample_mean, color = "sample"), lwd = 2, lty = 2, color = "black")
plot_means +
geom_vline(aes(xintercept = theory_mean, color = "theory"), lwd = 2, color = "red") +
geom_vline(aes(xintercept = sample_mean, color = "sample"), lwd = 2, lty = 2, color = "black")
plot_means +
geom_vline(aes(xintercept = theory_mean), lwd = 2, color = "red")
plot_means +
geom_vline(aes(xintercept = theory_mean), lwd = 2, color = "red") +
geom_vline(aes(xintercept = sample_mean), lwd = 2, lty = 2, color = "black")
plot_means +
geom_vline(xintercept = theory_mean, lwd = 2, color = "red") +
geom_vline(xintercept = sample_mean, lwd = 2, lty = 2, color = "black")
theory_variance <- (1 / lambda) ^ 2 / n
sample_variance <- var(means)
table(sample_variance, theory_variance)
a <- data.frame(sample_variance, theory_variance, theory_variance - sample_variance, colnames(c("Sample", "Theory", "Difference")))
a <- data.frame(cbind(sample_variance, theory_variance, theory_variance) - sample_variance, colnames(c("Sample", "Theory", "Difference")))
?data.frame
a <- data.frame(Sample = sample_variance, Theory = theory_variance, Difference = theory_variance - sample_variance)
a
data.frame(Sample Variance = sample_variance, Theoretical Variance = theory_variance, Difference = theory_variance - sample_variance)
data.frame("Sample Variance" = sample_variance, "Theoretical Variance" = theory_variance, Difference = theory_variance - sample_variance)
data.frame(Sample.Variance = sample_variance, Theoretical.Variance = theory_variance, Difference = theory_variance - sample_variance)
# Graph of means' distribution
plot_means +
geom_abline(aes(density(means), lwd = 2, color = "red"))
plot_means +
geom_density(aes(density(means), lwd = 2, color = "red"))
plot_means +
geom_abline(aes(density(means)), lwd = 2, color = "red")
of means' distribution
plot_means +
geom_density(aes(density(means)), lwd = 2, color = "red")
plot_means +
geom_density(density(means), lwd = 2, color = "red")
plot_means +
geom_density(aes(means), lwd = 2, color = "red")
plot_means + geom_density()
ggplot(aes(x = means)) +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(y = ..density..)) +
geom_density()
ggplot() +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(x = means, y = ..density..)) +
geom_density()
ggplot() +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(x = means, y = ..density..)) +
geom_density(color = "red")
ggplot() +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(x = means, y = ..density..)) +
geom_density(aes(means), color = "red")
ggplot() +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(x = means, y = ..density..)) +
geom_density(aes(means), color = "red")
labs(x = "Simulation means", y = "Density", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(x = means, y = ..density..)) +
geom_density(aes(means), color = "red") +
labs(x = "Simulation means", y = "Density", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
ggplot() +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(x = means, y = ..density..)) +
geom_density(aes(means), lwd = 2, color = "red") +
labs(x = "Simulation means", y = "Density", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
plot_distribution <- ggplot() +
geom_histogram(stat = "bin", color = "black", fill = "cyan", binwidth = 0.25, aes(x = means, y = ..density..)) +
geom_density(aes(means), lwd = 2, color = "red") +
labs(x = "Simulation means", y = "Density", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
normal_dist <- dnorm(seq(min(means), max(means), length = 2 * n), mean = 1 / lambda, sd = sqrt(((1 / lambda) / sqrt(n)) ^ 2))
y <- dnorm(x, mean=1/lambda, sd=sqrt(((1/lambda)/sqrt(n))^2))
x <- seq(min(means_exp), max(means_exp), length=2*n)
y <- dnorm(x, mean=1/lambda, sd=sqrt(((1/lambda)/sqrt(n))^2))
x <- seq(min(means), max(means), length=2*n)
y <- dnorm(x, mean=1/lambda, sd=sqrt(((1/lambda)/sqrt(n))^2))
plot_distribution +
geom_density(aes(normal_dist), lty = 2, lwd = 2, color = "black")
plot_distribution +
geom_density(aes(y = normal_dist, x = seq(min(means), max(means), length = 2 * n)), lty = 2, lwd = 2, color = "black")
plot_distribution +
stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = sqrt(((1 / lambda) / sqrt(n)) ^ 2)), color = "gold1", size = 1.0)
means <- data.frame(means)
plot_means <- ggplot(means, aes(means)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "cyan", binwidth = 0.25) +
labs(x = "Simulation means", y = "Frequency", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
plot_means
plot_means + geom_density()
geom_density(aes(means), lwd = 2, color = "red")
plot_means +
geom_density(aes(means), lwd = 2, color = "red")
plot_means +
stat_function(fun = dnorm, args = list(mean = 1 / lambda, sd = sqrt(((1 / lambda) / sqrt(n)) ^ 2)), color = "gold1", size = 1.0)
plot_means +
stat_function(fun = dnorm, args = list(mean = sample_mean, sd = sd(means)), color = "red", lwd = 2)
View(means)
plot_means +
stat_function(fun = dnorm, args = list(mean = sample_mean, sd = sd(means$means)), color = "red", lwd = 2)
sample_mean <- mean(means)
plot_means +
stat_function(fun = dnorm, args = list(mean = sample_mean, sd = sd(means$means)), color = "red", lwd = 2)
plot_means +
stat_function(fun = dnorm, args = list(mean = sample_mean, sd = sd(means$means)), color = "red", lwd = 2)
sample_mean <- mean(means$means)
# Graph of means' distribution
plot_means +
stat_function(fun = dnorm, args = list(mean = sample_mean, sd = sd(means$means)), color = "red", lwd = 2)
plot_means +
stat_density(geom = line)
plot_means +
stat_density(geom = "line")
plot_means +
stat_density(geom = "line", color = "red", lwd = 2)
plot_distribution +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = 1 / (lambda * sqrt(n))), color = "black", lwd = 2, lty = 2)
plot_distribution +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = 1 / (lambda * sqrt(n))), color = "black")
plot_distribution
plot_distribution <- plot_means +
stat_density(geom = "line", color = "red", lwd = 2)
plot_distribution
plot_distribution
plot_distribution +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = 1 / (lambda * sqrt(n))), color = "black"), lwd = 2, lty = 2)
plot_distribution +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = 1 / (lambda * sqrt(n))), color = "black")
plot_distribution +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = 1 / (lambda * sqrt(n))), color = "black", lwd = 2, lty = 2)
# Set simulation variables as described in the assignment
lambda <- 0.2
n <- 40
sim_count <- 1000
# Set seed for reproducibility
set.seed(88423)
# Conduct exponential simulation 'sim_count' times with 'n' exponentials and rate parameter equals 'lambda'
simulation <- replicate(sim_count, rexp(n, lambda))
means <- apply(simulation, 2, mean)
# Take a quick look of means
range(means)
means <- data.frame(means)
library(ggplot2)
plot_means <- ggplot(means, aes(means)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "cyan", binwidth = 0.25) +
labs(x = "Simulation means", y = "Frequency", title = "Histogram of Exponential Simulation Means") +
theme(plot.title = element_text(hjust = 0.5))
plot_means
# Question 1 - Sample Mean vs Theoretical Mean
# Calculate theoretical and sample means
theory_mean <- 1 / lambda
sample_mean <- mean(means$means)
# Compare them and plot
abs(theory_mean - sample_mean)
plot_means +
geom_vline(xintercept = theory_mean, lwd = 2, color = "red") +
geom_vline(xintercept = sample_mean, lwd = 2, lty = 2, color = "black")
# Question 2 - Sample Variance vs Theoretical Variance
# Calculate theoretical and sample variances
theory_variance <- (1 / lambda) ^ 2 / n
sample_variance <- var(means$means)
data.frame(Sample.Variance = sample_variance, Theoretical.Variance = theory_variance, Difference = theory_variance - sample_variance)
# Question 3 - Distribution
# Graph of means' distribution
plot_distribution <- plot_means +
stat_density(geom = "line", color = "red", lwd = 2)
plot_distribution
#Add normal distribution line for comparison
plot_distribution +
stat_function(fun = dnorm, args = list(mean = theory_mean, sd = 1 / (lambda * sqrt(n))), color = "black", lwd = 2, lty = 2)
library(knitr)
install.packages('tinytex')
# Display a summary of the data
summary(ToothGrowth)
#Display the first few rows of data
head(ToothGrowth)
# Convert dose to a factor
ToothGrowth$dose<-as.factor(ToothGrowth$dose)
# Plot tooth length ('len') vs. the dose amount ('dose'), broken out by supplement delivery method ('supp')
ggplot(aes(x=dose, y=len), data=ToothGrowth) + geom_boxplot(aes(fill=dose)) + xlab("Dose Amount") + ylab("Tooth Length") + facet_grid(~ supp) + ggtitle("Tooth Length vs. Dose Amount \nby Delivery Method") +
theme(plot.title = element_text(lineheight=.8, face="bold"))
ggplot(aes(x=dose, y=len), data=ToothGrowth) +
geom_boxplot(aes(fill=dose)) +
facet_grid(~ supp) +
labs(x = "Dose Amount", y = "Tooth Length", title = "Tooth Length vs. Dose Amount by Delivery Method") +
theme(plot.title = element_text(hjust = 0.5))
# Load ToothGrowth data
data("ToothGrowth")
# Summary of data
summary(ToothGrowth)
# First few rows
head(ToothGrowth)
# Exploratory Plot
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggplot(data = ToothGrowth, aes(x = dose, y = len)) +
geom_boxplot(aes(fill = dose)) +
facet_grid( ~ supp) +
labs(x = "Dose Amount", y = "Tooth Length", title = "Tooth Length against Dose Amount") +
theme(plot.title = element_text(hjust = 0.5))
# Load ToothGrowth data
data("ToothGrowth")
# Summary of data
summary(ToothGrowth)
# First few rows
head(ToothGrowth)
# Exploratory Plot
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
ggplot(data = ToothGrowth, aes(x = dose, y = len)) +
geom_boxplot(aes(fill = dose)) +
facet_grid( ~ supp) +
labs(x = "Dose Amount", y = "Tooth Length", title = "Tooth Length against Dose Amount") +
theme(plot.title = element_text(hjust = 0.5), legend.position = "none")
# run t-test
t.test(len~supp,data=ToothGrowth)
# run t-test
a <- t.test(len~supp,data=ToothGrowth)
# run t-test
t.test(data = ToothGrowth, len ~ dose)
